<?php

/**
 * BaseCar
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $model_id
 * @property integer $variant_id
 * @property string $title
 * @property text $description
 * @property string $year
 * @property integer $distance
 * @property string $fuel
 * @property string $engine
 * @property enum $transmission
 * @property string $color
 * @property string $country
 * @property string $price
 * @property boolean $promoted
 * @property boolean $slider
 * @property Variant $Variant
 * @property Model $Model
 * @property Doctrine_Collection $Fotos
 * 
 * @method integer             getModelId()      Returns the current record's "model_id" value
 * @method integer             getVariantId()    Returns the current record's "variant_id" value
 * @method string              getTitle()        Returns the current record's "title" value
 * @method text                getDescription()  Returns the current record's "description" value
 * @method string              getYear()         Returns the current record's "year" value
 * @method integer             getDistance()     Returns the current record's "distance" value
 * @method string              getFuel()         Returns the current record's "fuel" value
 * @method string              getEngine()       Returns the current record's "engine" value
 * @method enum                getTransmission() Returns the current record's "transmission" value
 * @method string              getColor()        Returns the current record's "color" value
 * @method string              getCountry()      Returns the current record's "country" value
 * @method string              getPrice()        Returns the current record's "price" value
 * @method boolean             getPromoted()     Returns the current record's "promoted" value
 * @method boolean             getSlider()       Returns the current record's "slider" value
 * @method Variant             getVariant()      Returns the current record's "Variant" value
 * @method Model               getModel()        Returns the current record's "Model" value
 * @method Doctrine_Collection getFotos()        Returns the current record's "Fotos" collection
 * @method Car                 setModelId()      Sets the current record's "model_id" value
 * @method Car                 setVariantId()    Sets the current record's "variant_id" value
 * @method Car                 setTitle()        Sets the current record's "title" value
 * @method Car                 setDescription()  Sets the current record's "description" value
 * @method Car                 setYear()         Sets the current record's "year" value
 * @method Car                 setDistance()     Sets the current record's "distance" value
 * @method Car                 setFuel()         Sets the current record's "fuel" value
 * @method Car                 setEngine()       Sets the current record's "engine" value
 * @method Car                 setTransmission() Sets the current record's "transmission" value
 * @method Car                 setColor()        Sets the current record's "color" value
 * @method Car                 setCountry()      Sets the current record's "country" value
 * @method Car                 setPrice()        Sets the current record's "price" value
 * @method Car                 setPromoted()     Sets the current record's "promoted" value
 * @method Car                 setSlider()       Sets the current record's "slider" value
 * @method Car                 setVariant()      Sets the current record's "Variant" value
 * @method Car                 setModel()        Sets the current record's "Model" value
 * @method Car                 setFotos()        Sets the current record's "Fotos" collection
 * 
 * @package    ThomasCloud
 * @subpackage model
 * @author     Grzegorz Kaszuba
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCar extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cars');
        $this->hasColumn('model_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('variant_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('title', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('year', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('distance', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('fuel', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('engine', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('transmission', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'manual',
              1 => 'automatic',
              2 => 'semi-auto',
             ),
             ));
        $this->hasColumn('color', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('country', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('price', 'string', 1024, array(
             'type' => 'string',
             'length' => 1024,
             ));
        $this->hasColumn('promoted', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('slider', 'boolean', null, array(
             'type' => 'boolean',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Variant', array(
             'local' => 'variant_id',
             'foreign' => 'id'));

        $this->hasOne('Model', array(
             'local' => 'model_id',
             'foreign' => 'id'));

        $this->hasMany('Foto as Fotos', array(
             'local' => 'id',
             'foreign' => 'car_id',
             'onDelete' => 'CASCADE'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'description',
              2 => 'color',
              3 => 'fuel',
              4 => 'engine',
              5 => 'country',
              6 => 'price',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'name' => 'slug',
             'fields' => 
             array(
              0 => 'title',
             ),
             ));
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}